enum TypeCompte {
    COURANT
    EPARGNE
}

enum TypeTransaction {
    DEPOT
    RETRAIT
}

type Query {
    allComptes: [Compte]
    compteById(id : ID):Compte
    totalSolde: SoldeStats
    findCompteByType(type: TypeCompte): [Compte]
    compteTransactions(id: ID!): [Transaction!]!
    allTransactions: [Transaction!]!
    transactionStats: TransactionStats!
}

type Compte {
    id: ID
    solde: Float
    dateCreation: String
    type: TypeCompte
}

type Mutation {
    saveCompte(compte:CompteRequest):Compte
    deleteCompte(id:ID):Boolean
    addTransaction(transactionRequest: TransactionRequest!): Transaction!
}

input CompteRequest {
    solde: Float
    dateCreation: String
    type: TypeCompte
}


type SoldeStats {
    count: Int
    sum: Float
    average: Float
}

type Transaction {
    id: ID!
    type: TypeTransaction!
    montant: Float!
    date: String!
    compte: Compte!
}

input TransactionRequest {
    type: TypeTransaction!
    montant: Float!
    compteId: ID!
}

type TransactionStats {
    count: Int!
    sumDepots: Float!
    sumRetraits: Float!
}